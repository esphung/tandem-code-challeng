{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/ericphung/Desktop/tandem/expo-app-solution/src/screens/PromptScreen.js\";\nimport React, { useState, useEffect, useLayoutEffect } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Heading from \"../components/shared/Heading\";\nimport TriviaCard from \"../components/shared/TriviaCard\";\n\nvar getListData = function getListData(list) {\n  var result = list.map(function (element, index) {\n    var item = {\n      id: index,\n      title: element\n    };\n    return item;\n  });\n  return result;\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    padding: 8,\n    paddingTop: 50\n  },\n  text: {\n    margin: 24,\n    fontSize: 18,\n    textAlign: 'center'\n  },\n  btnText: {\n    fontSize: 18,\n    textAlign: 'center'\n  }\n});\n\nfunction PromptScreen(_ref) {\n  var _this = this;\n\n  var navigation = _ref.navigation,\n      route = _ref.route;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedAnswer = _useState2[0],\n      setSelectedAnswer = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      listData = _useState4[0],\n      setListData = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      correctAnswer = _useState6[0],\n      setCorrectAnswer = _useState6[1];\n\n  var _route$params = route.params,\n      cardId = _route$params.cardId,\n      data = _route$params.data,\n      results = _route$params.results;\n\n  var showResultsScreen = function showResultsScreen() {\n    navigation.push('Results', {\n      data: data,\n      results: results\n    });\n  };\n\n  var showNextPromptScreen = function showNextPromptScreen() {\n    if (cardId + 1 < global.MAX_QUESTIONS_PER_ROUND) {\n      navigation.push('Prompt', {\n        cardId: cardId + 1,\n        data: data,\n        results: results\n      });\n    } else {\n      showResultsScreen();\n    }\n  };\n\n  var submitBtnPressed = function submitBtnPressed() {\n    if (selectedAnswer) {\n      results.answers[cardId] = selectedAnswer;\n    } else {\n      results.answers[cardId] = {\n        id: cardId,\n        title: ''\n      };\n    }\n\n    if (data[cardId].correct === selectedAnswer.title) {\n      setCorrectAnswer(data[cardId].correct);\n    } else {\n      setCorrectAnswer(data[cardId].correct);\n    }\n  };\n\n  useLayoutEffect(function () {\n    navigation.setOptions({\n      headerRight: function headerRight() {\n        return React.createElement(Button, {\n          onPress: function onPress() {\n            return navigation.replace('Welcome');\n          },\n          title: \"Quit\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 9\n          }\n        });\n      }\n    });\n  }, [navigation]);\n  useEffect(function () {\n    if (cardId >= global.MAX_QUESTIONS_PER_ROUND) showResultsScreen();\n    var answers = data[cardId].incorrect.concat(data[cardId].correct);\n    setListData(getListData(answers));\n    if (results.answers[cardId] && results.answers[cardId].title !== '') setSelectedAnswer(results.answers[cardId]);\n  }, [cardId]);\n  var view = React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 5\n    }\n  }, React.createElement(Heading, {\n    title: \"Question Number:\" + ' ' + (cardId + 1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }\n  }), React.createElement(TriviaCard, {\n    item: data[cardId],\n    selectedAnswer: selectedAnswer,\n    setSelectedAnswer: setSelectedAnswer,\n    cardId: cardId,\n    results: results,\n    listData: listData,\n    setListData: setListData,\n    correctAnswer: correctAnswer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }\n  }), !correctAnswer && React.createElement(TouchableOpacity, {\n    style: {\n      flex: 1,\n      justifyContent: 'center',\n      margin: 24,\n      width: '80%',\n      borderRadius: 12,\n      alignItems: 'center',\n      borderWidth: 1,\n      borderColor: 'black',\n      borderStyle: 'solid'\n    },\n    onPress: submitBtnPressed,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 27\n    }\n  }, React.createElement(Text, {\n    style: styles.btnText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 11\n    }\n  }, \"Submit\")), correctAnswer && React.createElement(TouchableOpacity, {\n    style: {\n      flex: 1,\n      justifyContent: 'center',\n      margin: 24,\n      width: '80%',\n      borderRadius: 12,\n      alignItems: 'center',\n      borderWidth: 1,\n      borderColor: 'black',\n      borderStyle: 'solid'\n    },\n    onPress: showNextPromptScreen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 26\n    }\n  }, React.createElement(Text, {\n    style: styles.btnText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 11\n    }\n  }, \"Next Question\")));\n  return view;\n}\n\nexport default PromptScreen;","map":{"version":3,"sources":["/Users/ericphung/Desktop/tandem/expo-app-solution/src/screens/PromptScreen.js"],"names":["React","useState","useEffect","useLayoutEffect","Heading","TriviaCard","getListData","list","result","map","element","index","item","id","title","styles","StyleSheet","create","container","flex","alignItems","padding","paddingTop","text","margin","fontSize","textAlign","btnText","PromptScreen","navigation","route","selectedAnswer","setSelectedAnswer","listData","setListData","correctAnswer","setCorrectAnswer","params","cardId","data","results","showResultsScreen","push","showNextPromptScreen","global","MAX_QUESTIONS_PER_ROUND","submitBtnPressed","answers","correct","setOptions","headerRight","replace","incorrect","concat","view","justifyContent","width","borderRadius","borderWidth","borderColor","borderStyle"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useLayoutEffect } from 'react';\nimport {\n  Text,\n  View,\n  StyleSheet,\n  Button,\n  TouchableOpacity,\n} from 'react-native';\n\n// shared components\nimport Heading from 'components/shared/Heading';\n\nimport TriviaCard from 'components/shared/TriviaCard';\n\nconst getListData = (list) => {\n  const result = list.map((element, index) => {\n    // give item an id and assign it's value property as the element\n    const item = { id: index, title: element };\n    // console.log('item: ', item);\n\n    // DEVELOPER DEBUG: display the item as string if not a string\n    // if (typeof element !== 'string') item.title = JSON.stringify(element);\n    return item;\n  });\n  return result;\n};\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    // justifyContent: 'center',\n    alignItems: 'center',\n    // backgroundColor: 'lightblue', // '#ecf0f1',\n    padding: 8,\n    paddingTop: 50,\n  },\n  text: {\n    margin: 24,\n    fontSize: 18,\n    // fontWeight: 'bold',\n    textAlign: 'center',\n  },\n  btnText: {\n    fontSize: 18,\n    // fontWeight: 'bold',\n    textAlign: 'center',\n  },\n});\n\n// VIEW COMPONENT DEFINITION BEGINS HERE\nfunction PromptScreen({ navigation, route }) {\n  // console.log('route.params.results: ', route.params.results);\n\n  // state\n  const [selectedAnswer, setSelectedAnswer] = useState('');\n\n  const [listData, setListData] = useState([]);\n\n  const [correctAnswer, setCorrectAnswer] = useState(null);\n\n\n  // props\n  const { cardId, data, results } = route.params;\n  // console.log('data[cardId].question: ', data[cardId].question);\n\n  // Navigation methods\n  const showResultsScreen = () => {\n    // console.log('results.answers.length: ', results.answers.length);\n    // console.log('data.length: ', data.length);\n    navigation.push('Results', {\n    data,\n    results,\n  })};\n  const showNextPromptScreen = () => {\n    // alert(cardId + 1);\n    if (cardId + 1 < global.MAX_QUESTIONS_PER_ROUND) {\n      // show next page\n      navigation.push('Prompt', {\n        cardId: cardId + 1,\n        data,\n        results,\n      });  \n    } else {\n      showResultsScreen();\n    }\n  };\n  const submitBtnPressed = () => {\n    // verify answer\n    \n\n    if (selectedAnswer) {\n      results.answers[cardId] = selectedAnswer;\n    } else {\n      results.answers[cardId] = {\n        id: cardId,\n        title: '',\n      }\n    }\n\n    // alert(selectedAnswer.title);\n    // alert(data[cardId].correct)\n\n    if (data[cardId].correct === selectedAnswer.title) {\n      // PLAYER WAS RIGHT\n      // alert('message?: DOMString')\n      // user's answer is correct, continue on\n      setCorrectAnswer(data[cardId].correct);\n    } else {\n      // PLAYER WAS WRONG\n      setCorrectAnswer(data[cardId].correct);\n\n      // user's answer is wrong, display correct one\n    }\n\n    // alert(JSON.stringify(selectedAnswer, [\"title\"], 1));\n\n    // show correct answer to user\n\n    // // navigate to next screen\n    // if (cardId >= data.length - 1) {\n    //   // if end of list, show results screen to user\n    //   showResultsScreen();\n    // } else {\n    //   // else, show user next question\n    //   showNextPromptScreen();\n    // }\n  };\n  useLayoutEffect(() => {\n    navigation.setOptions({\n      headerRight: () => (\n        <Button onPress={() => navigation.replace('Welcome')} title=\"Quit\" />\n      ),\n    });\n  }, [navigation]);\n  // when previous user answer or answer changes\n  // useEffect(() => {\n  //   // record new answer\n  //   if (selectedAnswer) {\n  //     results.answers[cardId] = selectedAnswer;\n  //   } else {\n  //     results.answers[cardId] = {\n  //       id: cardId,\n  //       title: '',\n  //     }\n  //   }\n  //   // console.log('results.answers: ', results.answers);\n  // }, [selectedAnswer]);\n  // when trivia item changes\n  useEffect(() => {\n    // global.MAX_QUESTIONS_PER_ROUND\n    if (cardId >= global.MAX_QUESTIONS_PER_ROUND) showResultsScreen();\n    // combine answers to be displayed\n    const answers = data[cardId].incorrect.concat(data[cardId].correct);\n\n    // parse answers into list data format\n    setListData(getListData(answers));\n\n    // set any previously chosen player answers\n    // console.log('results.answers[cardId]: ', results.answers[cardId]);\n    if (results.answers[cardId] && results.answers[cardId].title !== '') setSelectedAnswer(results.answers[cardId]);\n  }, [cardId]);\n  const view = (\n    <View style={styles.container}>\n      {/* TRIVIA CARD */}\n      <Heading title={`Question Number:${' '}${cardId + 1}`} />\n      <TriviaCard\n        item={data[cardId]}\n        selectedAnswer={selectedAnswer}\n        setSelectedAnswer={setSelectedAnswer}\n        cardId={cardId}\n        results={results}\n        listData={listData}\n        setListData={setListData}\n        correctAnswer={correctAnswer}\n\n      />\n      {/* SUBMIT BUTTON */}\n      {\n        !correctAnswer && <TouchableOpacity style={{\n          flex: 1,\n          justifyContent: 'center',\n          margin: 24,\n          width: '80%',\n          borderRadius: 12,\n          alignItems: 'center',\n          borderWidth: 1,\n          borderColor: 'black',\n          borderStyle: 'solid',\n        }} onPress={submitBtnPressed}>\n          <Text style={styles.btnText}>Submit</Text>\n        </TouchableOpacity>\n      }\n      {\n        correctAnswer && <TouchableOpacity style={{\n          flex: 1,\n          justifyContent: 'center',\n          margin: 24,\n          width: '80%',\n          borderRadius: 12,\n          alignItems: 'center',\n          borderWidth: 1,\n          borderColor: 'black',\n          borderStyle: 'solid',\n        }} onPress={showNextPromptScreen}>\n          <Text style={styles.btnText}>Next Question</Text>\n        </TouchableOpacity>\n      }\n    </View>\n  );\n  return view;\n} // END VIEW DEF\n\nexport default PromptScreen;\n"]},"metadata":{},"sourceType":"module"}