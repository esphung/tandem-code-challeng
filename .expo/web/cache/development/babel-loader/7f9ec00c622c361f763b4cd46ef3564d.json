{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/ericphung/Desktop/tandem/expo-app-solution/src/screens/ResultsScreen.js\";\nimport React, { useState, useEffect, useLayoutEffect } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Heading from \"../components/shared/Heading\";\nimport Instructions from \"../components/shared/Instructions\";\nimport ListView from \"../components/Results/ListView\";\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 8,\n    paddingTop: 50\n  },\n  text: {\n    margin: 24,\n    fontSize: 18,\n    textAlign: 'center'\n  }\n});\n\nvar getCorrectAnswers = function getCorrectAnswers(data, results) {\n  var correctAnswers = data.filter(function (question, index) {\n    console.log('data[index].correct: ', data[index].correct);\n    if (index >= global.MAX_QUESTIONS_PER_ROUND) return;\n    if (data[index].correct === results.answers[index].title) return results.answers[index];\n  });\n  return correctAnswers;\n};\n\nvar getListData = function getListData(questions, results) {\n  var result = questions.map(function (question, index) {\n    if (index >= global.MAX_QUESTIONS_PER_ROUND) return;\n    return {\n      id: index,\n      expected: question.correct,\n      actual: results.answers[index] ? results.answers[index].title : ''\n    };\n  });\n  return result;\n};\n\nfunction ResultsScreen(_ref) {\n  var _this = this;\n\n  var navigation = _ref.navigation,\n      route = _ref.route;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      correctAnswers = _useState2[0],\n      setCorrectAnswers = _useState2[1];\n\n  var _useState3 = useState(route.params ? route.params.results : []),\n      _useState4 = _slicedToArray(_useState3, 2),\n      answers = _useState4[0],\n      setAnswers = _useState4[1];\n\n  var _useState5 = useState(route.params ? route.params.data : []),\n      _useState6 = _slicedToArray(_useState5, 2),\n      questions = _useState6[0],\n      setQuestions = _useState6[1];\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      listData = _useState8[0],\n      setListData = _useState8[1];\n\n  useLayoutEffect(function () {\n    navigation.setOptions({\n      headerRight: function headerRight() {\n        return React.createElement(Button, {\n          onPress: function onPress() {\n            return navigation.replace('Welcome');\n          },\n          title: \"Quit\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 9\n          }\n        });\n      }\n    });\n  }, [navigation]);\n  useEffect(function () {\n    setListData(getListData(questions, answers));\n  }, [answers, questions]);\n  var view = React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 5\n    }\n  }, React.createElement(Heading, {\n    title: \"You are finished, good job!\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }), React.createElement(Instructions, {\n    title: \"Here are your results:\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }), React.createElement(Text, {\n    style: styles.text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }, \"total questions: \", questions.length), React.createElement(Text, {\n    style: styles.text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }, \"correct answers: \", correctAnswers.length, correctAnswers.length > 0 ? React.createElement(Text, {\n    style: {\n      opacity: 0.3\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 37\n    }\n  }, \" \" + ((correctAnswers.length / questions.length).toFixed(2) * 100).toFixed(2) + \"%\") : null), React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }), React.createElement(ListView, {\n    listData: listData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }\n  }));\n  return view;\n}\n\nexport default ResultsScreen;","map":{"version":3,"sources":["/Users/ericphung/Desktop/tandem/expo-app-solution/src/screens/ResultsScreen.js"],"names":["React","useState","useEffect","useLayoutEffect","Heading","Instructions","ListView","styles","StyleSheet","create","container","flex","padding","paddingTop","text","margin","fontSize","textAlign","getCorrectAnswers","data","results","correctAnswers","filter","question","index","console","log","correct","global","MAX_QUESTIONS_PER_ROUND","answers","title","getListData","questions","result","map","id","expected","actual","ResultsScreen","navigation","route","setCorrectAnswers","params","setAnswers","setQuestions","listData","setListData","setOptions","headerRight","replace","view","length","opacity","toFixed"],"mappings":"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","sourcesContent":["/*\nFILENAME:     ResultsScreen.js\nPURPOSE:      Last screen tp show to user on round completion\nAUTHOR:       Eric Phung\nCREATED:      10/26/2020 03:07 PM\n*/\nimport React, { useState, useEffect, useLayoutEffect } from 'react';\nimport {\n  Text,\n  View,\n  StyleSheet,\n  Button,\n  ScrollView,\n} from 'react-native';\n\n// shared components\nimport Heading from 'components/shared/Heading';\nimport Instructions from 'components/shared/Instructions';\n\nimport ListView from 'components/Results/ListView';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    // justifyContent: 'center',\n    // alignItems: 'center',\n    // backgroundColor: 'skyblue', // '#ecf0f1',\n    padding: 8,\n    paddingTop: 50,\n  },\n  text: {\n    margin: 24,\n    fontSize: 18,\n    // fontWeight: 'bold',\n    textAlign: 'center',\n\n    // borderWidth: 1,\n    // borderColor: 'red',\n    // borderStyle: 'solid',\n  },\n});\n\nconst getCorrectAnswers = (data, results) => {\n  let correctAnswers = data.filter((question, index) => {\n    console.log('data[index].correct: ', data[index].correct);\n    if (index >= global.MAX_QUESTIONS_PER_ROUND) return;\n\n    if (data[index].correct === results.answers[index].title) return results.answers[index]\n  })\n  // console.log('results.answers: ', results.answers);\n  return correctAnswers;\n};\n\nconst getListData = (questions, results) => {\n  let result = questions.map((question, index) => {\n    if (index >= global.MAX_QUESTIONS_PER_ROUND) return\n    // console.log('questions: ', questions);\n    return {\n      id: index,\n      expected: question.correct,\n      actual: results.answers[index] ? results.answers[index].title : '',\n    }\n  });\n\n  return result;\n};\n\nfunction ResultsScreen({ navigation, route }) {\n  const [correctAnswers, setCorrectAnswers] = useState([]);\n  const [answers, setAnswers] = useState(route.params ? route.params.results : [])\n  const [questions, setQuestions] = useState(route.params ? route.params.data : []);\n  const [listData, setListData] = useState([]);\n\n  useLayoutEffect(() => {\n    navigation.setOptions({\n      headerRight: () => (\n        <Button onPress={() => navigation.replace('Welcome')} title=\"Quit\" />\n      ),\n    });\n  }, [navigation]);\n\n  useEffect(() => {\n    // setCorrectAnswers(getCorrectAnswers(questions, answers));\n    setListData(getListData(questions, answers));\n  }, [answers, questions]);\n\n  const view = (\n    <View style={styles.container}>\n      <Heading title=\"You are finished, good job!\" />\n      <Instructions title=\"Here are your results:\" />\n      <Text style={styles.text}>total questions: { questions.length }</Text>\n      <Text style={styles.text}>correct answers: { correctAnswers.length }\n      {\n        correctAnswers.length > 0 ? <Text style={{ opacity: 0.3 }}>{` ${(((correctAnswers.length / questions.length).toFixed(2)) * 100).toFixed(2)}%`}\n      </Text> : null\n      }\n      </Text>\n      \n      <View>\n        {/*\n          <Button\n              title=\"Go Back to Welcome Screen\"\n              onPress={() => navigation.navigate('Welcome')}\n            />\n        */}\n      </View>\n      <ListView listData={listData} />\n    </View>\n  );\n  return view;\n}\n\nexport default ResultsScreen;\n"]},"metadata":{},"sourceType":"module"}